import os
import discord
from discord.ext import tasks
from discord import app_commands
from datetime import datetime
from aiohttp import web

# ================= CONFIG =================
TOKEN = os.environ.get("DISCORD_TOKEN")
TARGET_CHANNEL_ID = 1406537424947122266  # ‡∏´‡πâ‡∏≠‡∏á‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å
ADMIN_CHANNEL_ID = 1406539787594240041   # ‡∏´‡πâ‡∏≠‡∏á log ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
GUIDE_CHANNEL_ID = 1406537337676103742   # ‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠
PORT = int(os.environ.get("PORT", 3000))  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UptimeRobot ping

intents = discord.Intents.default()
intents.members = True
bot = discord.Client(intents=intents)
tree = app_commands.CommandTree(bot)

# ================= HELP / GUIDE =================
async def send_guide():
    await bot.wait_until_ready()
    guide_channel = bot.get_channel(GUIDE_CHANNEL_ID)
    if guide_channel:
        # ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
        await guide_channel.purge(limit=100)
        embed = discord.Embed(
            title="üìå ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å",
            description="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:\n`/‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å user:@‡∏ä‡∏∑‡πà‡∏≠ message:‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: `/‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å @‡πÇ‡∏à ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢`",
            color=0x5865F2
        )
        embed.set_footer(text="‡∏£‡∏∞‡∏ö‡∏ö‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        await guide_channel.send(embed=embed)

# ================= CRASH LOG =================
async def send_crash_log(error_msg):
    await bot.wait_until_ready()
    admin_channel = bot.get_channel(ADMIN_CHANNEL_ID)
    if admin_channel:
        embed = discord.Embed(title="üí• Bot Crash/Error", description=error_msg, color=0xE74C3C)
        embed.set_footer(text=f"üìÖ {datetime.now().strftime('%d/%m/%Y ‡πÄ‡∏ß‡∏•‡∏≤ %H:%M')}")
        await admin_channel.send(embed=embed)

# ================= ‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å Command =================
class ReplyView(discord.ui.View):
    def __init__(self, sender_id):
        super().__init__(timeout=None)
        self.sender_id = sender_id

    @discord.ui.button(label="üíå ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö", style=discord.ButtonStyle.primary)
    async def reply_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(
            "‚úçÔ∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á:", ephemeral=True
        )

        def check(m):
            return m.author == interaction.user and isinstance(m.channel, discord.DMChannel)

        try:
            msg = await bot.wait_for("message", check=check, timeout=120)
            sender = await bot.fetch_user(self.sender_id)
            if sender:
                await sender.send(f"üì® ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å {interaction.user.display_name}:\n\n{msg.content}")
                await interaction.followup.send("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)
        except:
            await interaction.followup.send("‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö", ephemeral=True)


@tree.command(name="‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å", description="‡∏ù‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡πÉ‡∏Ñ‡∏£‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏ï‡∏±‡∏ß‡∏ï‡∏ô)")
async def send_message(
    interaction: discord.Interaction,
    user: discord.Member,
    message: str
):
    try:
        await interaction.response.defer(ephemeral=True)
        guild = interaction.guild
        target_channel = guild.get_channel(TARGET_CHANNEL_ID)
        admin_channel = guild.get_channel(ADMIN_CHANNEL_ID)

        # Embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å
        embed = discord.Embed(
            title="üì® ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì",
            color=0x2ECC71,
            timestamp=datetime.now()
        )
        embed.add_field(name="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", value=message, inline=False)
        embed.add_field(name="‡∏Ñ‡∏≥‡πÉ‡∏ö‡πâ", value="‡πÑ‡∏°‡πà‡∏°‡∏µ (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏ï‡∏±‡∏ß‡∏ï‡∏ô)", inline=False)
        embed.set_footer(text="‡∏£‡∏∞‡∏ö‡∏ö‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")

        # ‡∏õ‡∏∏‡πà‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
        view = ReplyView(sender_id=interaction.user.id)

        # ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å
        await target_channel.send(content=f"{user.mention}", embed=embed, view=view)

        # ‡∏™‡πà‡∏á DM
        try:
            await user.send(embed=embed, view=view)
        except:
            pass

        # Log ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
        log_embed = discord.Embed(title="üì© ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà", color=0x1ABC9C)
        log_embed.add_field(name="‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á", value=f"{interaction.user.mention} (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏ï‡∏±‡∏ß‡∏ï‡∏ô)", inline=False)
        log_embed.add_field(name="‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö", value=f"{user.mention} ({user.id})", inline=False)
        log_embed.add_field(name="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", value=message, inline=False)
        log_embed.set_footer(text=f"üìÖ {datetime.now().strftime('%d/%m/%Y ‡πÄ‡∏ß‡∏•‡∏≤ %H:%M')}")
        await admin_channel.send(embed=log_embed)

        await interaction.followup.send("‚úÖ ‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

    except Exception as e:
        await send_crash_log(str(e))

# ================= Bot Events =================
@bot.event
async def on_ready():
    try:
        await tree.sync()
        print(f"‚úÖ Logged in as {bot.user}")
        await send_guide()
    except Exception as e:
        await send_crash_log(str(e))

# ================= HTTP Server ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö UptimeRobot =================
async def handle_ping(request):
    return web.Response(text="Bot is alive!")

app = web.Application()
app.add_routes([web.get("/", handle_ping)])

# ================= RUN BOT + HTTP SERVER =================
async def main():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    await bot.start(TOKEN)

import asyncio
asyncio.run(main())
