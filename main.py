import os
import discord
from discord import app_commands
from datetime import datetime
import asyncio
from aiohttp import web
import traceback

# ================= CONFIG =================
TOKEN = os.environ["DISCORD_TOKEN"]
GUILD_ID = 1407172158223814676         # ‡πÉ‡∏™‡πà Guild ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
TARGET_CHANNEL_ID = 123456789012345678
ADMIN_CHANNEL_ID = 123456789012345678
GUIDE_CHANNEL_ID = 1406537337676103742
CRASH_LOG_CHANNEL_NAME = "bot-crash-log"

intents = discord.Intents.default()
intents.members = True
intents.message_content = True
bot = discord.Client(intents=intents)
tree = app_commands.CommandTree(bot)

# ================= Choices =================
REVEAL_CHOICES = [
    app_commands.Choice(name="‡πÉ‡∏ä‡πà (‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏ä‡∏∑‡πà‡∏≠)", value="yes"),
    app_commands.Choice(name="‡πÑ‡∏°‡πà (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏ä‡∏∑‡πà‡∏≠)", value="no"),
]

# ================= ‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å Command =================
@tree.command(name="‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å", description="‡∏ù‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡πÉ‡∏Ñ‡∏£‡∏ö‡∏≤‡∏á‡∏Ñ‡∏ô")
@app_commands.describe(user="‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", message="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", reveal="‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
@app_commands.choices(reveal=REVEAL_CHOICES)
async def send_message(interaction: discord.Interaction, user: discord.Member, message: str, reveal: app_commands.Choice[str]):
    await interaction.response.defer(ephemeral=True)

    guild = interaction.guild
    target_channel = guild.get_channel(TARGET_CHANNEL_ID)
    admin_channel = guild.get_channel(ADMIN_CHANNEL_ID)

    await target_channel.send(f"**‡∏ñ‡∏∂‡∏á {user.mention}**\n{message}")

    try:
        sender_name = interaction.user.display_name if reveal.value == "yes" else "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏ï‡∏±‡∏ß‡∏ï‡∏ô"
        await user.send(f"‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å {sender_name}:\n\n{message}")
    except:
        pass

    now = datetime.now().strftime("%d/%m/%Y ‡πÄ‡∏ß‡∏•‡∏≤ %H:%M")
    embed = discord.Embed(title="üì© ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà", color=0x1ABC9C)
    embed.add_field(
        name="‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á",
        value=f"{interaction.user.mention} ({'‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢' if reveal.value == 'yes' else '‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢'})",
        inline=False
    )
    embed.add_field(name="‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö", value=f"{user.mention} ({user.id})", inline=False)
    embed.add_field(name="‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", value=message, inline=False)
    embed.set_footer(text=f"üìÖ {now}")
    await admin_channel.send(embed=embed)

    await interaction.followup.send("‚úÖ ‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß", ephemeral=True)

# ================= Bot Events =================
@bot.event
async def on_ready():
    await tree.sync()
    print(f"‚úÖ Logged in as {bot.user}")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á Crash Log ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    guild = bot.get_guild(GUILD_ID)
    global crash_channel
    crash_channel = discord.utils.get(guild.text_channels, name=CRASH_LOG_CHANNEL_NAME)
    if crash_channel is None:
        crash_channel = await guild.create_text_channel(CRASH_LOG_CHANNEL_NAME)
        print(f"üÜï ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡πâ‡∏≠‡∏á {CRASH_LOG_CHANNEL_NAME} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Crash Log")

    # ‡∏™‡πà‡∏á‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å
    guide_channel = bot.get_channel(GUIDE_CHANNEL_ID)
    if guide_channel:
        embed = discord.Embed(
            title="üìå ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å",
            description="‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á:\n\n`/‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å user:@‡∏ä‡∏∑‡πà‡∏≠ message:‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° reveal:(‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ)`\n\n"
                        "üîπ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: `/‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å @Jojo ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πà‡∏≠‡∏¢ reveal:‡πÑ‡∏°‡πà`",
            color=0x5865F2
        )
        embed.set_footer(text="‡∏£‡∏∞‡∏ö‡∏ö‡∏ù‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥")
        await guide_channel.send(embed=embed)

# ================= Keep-Alive Web Server =================
async def handle(request):
    return web.Response(text="Bot is alive!")

app = web.Application()
app.router.add_get("/", handle)

async def start_webserver():
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', int(os.environ.get("PORT", 3000)))
    await site.start()
    print("üåê Web server running for keep-alive")

# ================= Ping ‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ =================
async def self_ping():
    import aiohttp
    while True:
        try:
            url = f"http://{os.environ.get('RENDER_INTERNAL_HOST', 'localhost')}:{os.environ.get('PORT', 3000)}"
            async with aiohttp.ClientSession() as session:
                await session.get(url)
                print("üèì Self ping sent")
        except:
            pass
        await asyncio.sleep(300)  # 5 ‡∏ô‡∏≤‡∏ó‡∏µ

# ================= Main Loop with Auto Restart & Crash Log =================
async def main():
    await start_webserver()
    asyncio.create_task(self_ping())

    while True:
        try:
            await bot.start(TOKEN)
        except Exception:
            print("‚ùå Bot crashed! Restarting...")
            traceback.print_exc()
            try:
                if bot.is_ready():
                    now = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
                    embed = discord.Embed(
                        title="‚ùå Bot Crash Alert",
                        description=f"‡πÄ‡∏ß‡∏•‡∏≤: {now}\n‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:\n```{traceback.format_exc()}```",
                        color=0xE74C3C
                    )
                    await crash_channel.send(embed=embed)
            except:
                pass
            await asyncio.sleep(5)  # ‡∏£‡∏≠ 5 ‡∏ß‡∏¥ ‡∏Å‡πà‡∏≠‡∏ô restart

asyncio.run(main())
